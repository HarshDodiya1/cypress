generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum KeyStatus {
  expired
  invalid
  valid
  default
}

enum KeyType {
  stream_xchacha20
  secretstream
  secretbox
  kdf
  generichash
  shorthash
  auth
  hmacsha256
  hmacsha512
  aead_det
  aead_ietf
}

enum FactorStatus {
  verified
  unverified
}

enum FactorType {
  webauthn
  totp
}

enum AalLevel {
  aal3
  aal2
  aal1
}

enum CodeChallengeMethod {
  plain
  s256
}

enum PricingType {
  recurring
  one_time
}

enum PricingPlanInterval {
  year
  month
  week
  day
}

enum SubscriptionStatus {
  unpaid
  past_due
  incomplete_expired
  incomplete
  canceled
  active
  trialing
}

enum EqualityOp {
  in
  gte
  gt
  lte
  lt
  neq
  eq
}

enum Action {
  ERROR
  TRUNCATE
  DELETE
  UPDATE
  INSERT
}

// Tables

model Workspace {
  id             String         @id @default(uuid()) @db.Uuid
  createdAt      DateTime       @default(now())
  workspaceOwner String         @db.Uuid
  title          String
  iconId         String
  data           String?
  inTrash        String?
  logo           String?
  bannerUrl      String?
  folders        Folder[]
  files          File[]
  collaborators  Collaborator[]
}

model Folder {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  title       String
  iconId      String
  data        String?
  inTrash     String?
  bannerUrl   String?
  workspaceId String    @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  files       File[]
}

model File {
  id          String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now())
  title       String
  iconId      String
  data        String?
  inTrash     String?
  bannerUrl   String?
  workspaceId String    @db.Uuid
  folderId    String    @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  folder      Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(uuid()) @db.Uuid
  fullName       String?
  avatarUrl      String?
  billingAddress Json?
  updatedAt      DateTime?
  paymentMethod  Json?
  email          String?
  password       String?
  emailVerified  Boolean?
  subscriptions  Subscription[]
  collaborators  Collaborator[]
}

model Customer {
  id               String  @id @default(uuid()) @db.Uuid
  stripeCustomerId String?
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  active      Boolean?
  name        String?
  description String?
  image       String?
  metadata    Json?
  prices      Price[]
}

model Price {
  id              String               @id @default(uuid()) @db.Uuid
  productId       String?              @db.Uuid
  product         Product?             @relation(fields: [productId], references: [id])
  active          Boolean?
  description     String?
  unitAmount      BigInt?
  currency        String?
  type            PricingType?
  interval        PricingPlanInterval?
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json?
  Subscription    Subscription[]
}

model Subscription {
  id                 String              @id @default(uuid()) @db.Uuid
  userId             String              @db.Uuid
  user               User                @relation(fields: [userId], references: [id])
  status             SubscriptionStatus?
  metadata           Json?
  priceId            String?             @db.Uuid
  price              Price?              @relation(fields: [priceId], references: [id])
  quantity           Int?
  cancelAtPeriodEnd  Boolean?
  created            DateTime            @default(now())
  currentPeriodStart DateTime            @default(now())
  currentPeriodEnd   DateTime            @default(now())
  endedAt            DateTime?
  cancelAt           DateTime?
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
}

model Collaborator {
  id          String    @id @default(uuid()) @db.Uuid
  workspaceId String    @db.Uuid
  userId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
